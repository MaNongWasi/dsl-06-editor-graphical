package com.dslfoundry.statemachine.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import jetbrains.mps.openapi.editor.descriptor.EditorHintsProvider;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;
import java.util.Arrays;
import jetbrains.mps.editor.runtime.descriptor.ConceptEditorHintImpl;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase implements EditorHintsProvider {
  private Collection<ConceptEditorHint> myHints = Arrays.<ConceptEditorHint>asList(new ConceptEditorHintImpl("Diagrammatic", "Diagrammatic", true, "com.dslfoundry.statemachine.editor.StateMachineHints.Diagrammatic"), new ConceptEditorHintImpl("Tabular", "Tabular", true, "com.dslfoundry.statemachine.editor.StateMachineHints.Tabular"), new ConceptEditorHintImpl("Textual", "Textual", true, "com.dslfoundry.statemachine.editor.StateMachineHints.Textual"));
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Event_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new IStateMachineContents_Tabular_Editor());
      case 2:
        return Arrays.asList(new ConceptEditor[]{new State_Diagrammatic_Editor(), new State_Editor()});
      case 3:
        return Arrays.asList(new ConceptEditor[]{new StateMachine_Diagrammatic_Editor(), new StateMachine_Editor()});
      case 4:
        return Arrays.asList(new ConceptEditor[]{new Transition_Diagrammatic_Editor(), new Transition_Editor(), new Transition_Tabular_Editor()});
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    switch (editorComponentId) {
      case "com.dslfoundry.statemachine.editor.StateMachineDiagramContents":
        return Collections.singletonList(new StateMachineDiagramContents());
      case "com.dslfoundry.statemachine.editor.StateMachineTextContents":
        return Collections.singletonList(new StateMachineTextContents());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorHint> getHints() {
    return myHints;
  }


  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xdac36cdfb92546cfL, 0x8a2c2b6a1b73035cL, 0x51c6850f8a2fce2dL), MetaIdFactory.conceptId(0xdac36cdfb92546cfL, 0x8a2c2b6a1b73035cL, 0x6b05dff7a3efd459L), MetaIdFactory.conceptId(0xdac36cdfb92546cfL, 0x8a2c2b6a1b73035cL, 0x51c6850f8a2fce2cL), MetaIdFactory.conceptId(0xdac36cdfb92546cfL, 0x8a2c2b6a1b73035cL, 0x51c6850f8a2fce29L), MetaIdFactory.conceptId(0xdac36cdfb92546cfL, 0x8a2c2b6a1b73035cL, 0x51c6850f8a2fce2eL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xdac36cdfb92546cfL, 0x8a2c2b6a1b73035cL, 0x6b05dff7a3efd459L)).seal();
}
